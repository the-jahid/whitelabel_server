import { z } from 'zod';

// -----------------
// 1. Base Schema
// This schema defines the core structure of a UserData entity, mirroring the Prisma model.
// It serves as the single source of truth for the object's shape.
// -----------------

export const userDataSchema = z.object({
  id: z.string().uuid(),
  campaignName: z.string(), // Added campaignName
  outboundId: z.string(),
  bearerToken: z.string(),
  userId: z.string().uuid(),
  createdAt: z.date(),
  updatedAt: z.date(),
});


// -----------------
// 2. Create Schema (for POST requests)
// Omits fields that are auto-generated by the database (id, createdAt, updatedAt).
// -----------------

export const createUserDataSchema = userDataSchema
  .omit({
    id: true,
    createdAt: true,
    updatedAt: true,
  })
  .refine((data) => data.campaignName.trim().length > 0, { // Added validation
    message: 'Campaign Name cannot be empty.',
    path: ['campaignName'],
  })
  .refine((data) => data.outboundId.trim().length > 0, {
    message: 'Outbound ID cannot be empty.',
    path: ['outboundId'],
  })
  .refine((data) => data.bearerToken.trim().length > 0, {
    message: 'Bearer Token cannot be empty.',
    path: ['bearerToken'],
  });


// -----------------
// 3. Update Schema (for PATCH requests)
// Makes all fields in the create schema optional for partial updates.
// -----------------

export const updateUserDataSchema = createUserDataSchema.partial();


// -----------------
// 4. Read (Query) Schema (for GET request query parameters)
// This schema is separate as it validates query parameters, not the entity body.
// -----------------

export const queryUserDataSchema = z.object({
  page: z.coerce.number().int().positive().optional().default(1),
  limit: z.coerce.number().int().positive().optional().default(10),
  sortBy: z.string().optional().default('createdAt'),
  sortOrder: z.enum(['ASC', 'DESC']).optional().default('DESC'),
  userId: z.string().uuid({ message: 'Filter userId must be a valid UUID.' }).optional(),
  campaignName: z.string().optional(), // Added for filtering
});


// ---------------------------------------------------
// DTO Types
// ---------------------------------------------------

/**
 * The DTO type for creating a new UserData record.
 * Inferred from the createUserDataSchema for compile-time safety.
 */
export type CreateUserDataDto = z.infer<typeof createUserDataSchema>;

/**
 * The DTO type for updating an existing UserData record.
 * Inferred from the updateUserDataSchema. All properties are optional.
 */
export type UpdateUserDataDto = z.infer<typeof updateUserDataSchema>;

/**
 * The DTO type for handling query parameters on GET requests.
 * Inferred from the queryUserDataSchema for validating pagination, sorting, etc.
 */
export type QueryUserDataDto = z.infer<typeof queryUserDataSchema>;
